
Smart_Door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  000003fe  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d43  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059a  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c3  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000514  00000000  00000000  00002417  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000292b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 33       	cpi	r26, 0x32	; 50
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  7a:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_COMMAND>:
}

// LCD command function
void LCD_COMMAND(U8 x)
{
	LCD_COMMAND_PORT &= ~(1 << RS_PIN);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9e 7f       	andi	r25, 0xFE	; 254
  86:	92 bb       	out	0x12, r25	; 18
	LCD_COMMAND_PORT &= ~(1 << RW_PIN);
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	9d 7f       	andi	r25, 0xFD	; 253
  8c:	92 bb       	out	0x12, r25	; 18
	LCD_DATA_PORT = x;
  8e:	85 bb       	out	0x15, r24	; 21
	LCD_COMMAND_PORT |= (1 << E_PIN);
  90:	82 b3       	in	r24, 0x12	; 18
  92:	84 60       	ori	r24, 0x04	; 4
  94:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	89 ef       	ldi	r24, 0xF9	; 249
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_COMMAND+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_COMMAND+0x1e>
  a0:	00 00       	nop
	_delay_ms(1);
	LCD_COMMAND_PORT &= ~(1 << E_PIN);
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	08 95       	ret

000000aa <LCD_init>:
void LCD_DATA(U8);

// LCD initialize function
void LCD_init()
{
	DDRC = 0xFF;		// LCD data from port C
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x07;		// LCD RS, RW, E from port D (PD0 --> PD2)
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	81 bb       	out	0x11, r24	; 17
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	93 e1       	ldi	r25, 0x13	; 19
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_init+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_init+0x12>
  bc:	00 00       	nop
	_delay_ms(20);
	LCD_COMMAND(0x38);	// 8-bit 2 lines
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
	LCD_COMMAND(0x0E);  // Display on, cursor on 
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
	LCD_COMMAND(0x01);	// Clear display
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
  d0:	83 ef       	ldi	r24, 0xF3	; 243
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_init+0x2a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_init+0x30>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <LCD_DATA>:
}

// LCD data function
void LCD_DATA(U8 x)
{
	LCD_COMMAND_PORT |= (1 << RS_PIN);
  de:	92 b3       	in	r25, 0x12	; 18
  e0:	91 60       	ori	r25, 0x01	; 1
  e2:	92 bb       	out	0x12, r25	; 18
	LCD_COMMAND_PORT &= ~(1 << RW_PIN);
  e4:	92 b3       	in	r25, 0x12	; 18
  e6:	9d 7f       	andi	r25, 0xFD	; 253
  e8:	92 bb       	out	0x12, r25	; 18
	LCD_DATA_PORT = x;
  ea:	85 bb       	out	0x15, r24	; 21
	LCD_COMMAND_PORT |= (1 << E_PIN);
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_DATA+0x18>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_DATA+0x1e>
  fc:	00 00       	nop
	_delay_ms(1);
	LCD_COMMAND_PORT &= ~(1 << E_PIN);
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	82 bb       	out	0x12, r24	; 18
 104:	08 95       	ret

00000106 <LCD_DATA_STRING>:
}

// LCD string input function
void LCD_DATA_STRING(const U8* x)
{
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	8c 01       	movw	r16, r24
	for(char i = 0; x[i] != '\0'; i++)
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	09 c0       	rjmp	.+18     	; 0x124 <LCD_DATA_STRING+0x1e>
	{
		LCD_DATA(x[i]);
 112:	0e 94 6f 00 	call	0xde	; 0xde <LCD_DATA>
 116:	87 ea       	ldi	r24, 0xA7	; 167
 118:	91 e6       	ldi	r25, 0x61	; 97
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_DATA_STRING+0x14>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_DATA_STRING+0x1a>
 120:	00 00       	nop
}

// LCD string input function
void LCD_DATA_STRING(const U8* x)
{
	for(char i = 0; x[i] != '\0'; i++)
 122:	cf 5f       	subi	r28, 0xFF	; 255
 124:	f8 01       	movw	r30, r16
 126:	ec 0f       	add	r30, r28
 128:	f1 1d       	adc	r31, r1
 12a:	80 81       	ld	r24, Z
 12c:	81 11       	cpse	r24, r1
 12e:	f1 cf       	rjmp	.-30     	; 0x112 <LCD_DATA_STRING+0xc>
	{
		LCD_DATA(x[i]);
		_delay_ms(100);
	}
}
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <KEYPAD_READ>:
// Function to read input from keypad
U8 KEYPAD_READ()
{
	while(1)
	{
		for(char row = 0; row < 4; row++)
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	47 c0       	rjmp	.+142    	; 0x1ca <KEYPAD_READ+0x92>
		{
			KEYPAD_DDR = KEYPAD_ROW;
 13c:	80 ef       	ldi	r24, 0xF0	; 240
 13e:	8a bb       	out	0x1a, r24	; 26
			KEYPAD_PORT = ~(1 << row + 4);
 140:	63 2f       	mov	r22, r19
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	ab 01       	movw	r20, r22
 146:	4c 5f       	subi	r20, 0xFC	; 252
 148:	5f 4f       	sbci	r21, 0xFF	; 255
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <KEYPAD_READ+0x1c>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	4a 95       	dec	r20
 156:	e2 f7       	brpl	.-8      	; 0x150 <KEYPAD_READ+0x18>
 158:	80 95       	com	r24
 15a:	8b bb       	out	0x1b, r24	; 27
			for(char col = 0; col < 4; col++)
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	32 c0       	rjmp	.+100    	; 0x1c4 <KEYPAD_READ+0x8c>
			{
				if(!(KEYPAD_PIN & (1 << col)))
 160:	89 b3       	in	r24, 0x19	; 25
 162:	42 2f       	mov	r20, r18
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <KEYPAD_READ+0x38>
 16c:	95 95       	asr	r25
 16e:	87 95       	ror	r24
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <KEYPAD_READ+0x34>
 174:	80 fd       	sbrc	r24, 0
 176:	06 c0       	rjmp	.+12     	; 0x184 <KEYPAD_READ+0x4c>
 178:	81 ee       	ldi	r24, 0xE1	; 225
 17a:	94 e0       	ldi	r25, 0x04	; 4
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <KEYPAD_READ+0x44>
 180:	00 c0       	rjmp	.+0      	; 0x182 <KEYPAD_READ+0x4a>
 182:	00 00       	nop
				_delay_ms(5);
				if(!(KEYPAD_PIN & (1 << col)))
 184:	89 b3       	in	r24, 0x19	; 25
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	04 2e       	mov	r0, r20
 18a:	02 c0       	rjmp	.+4      	; 0x190 <KEYPAD_READ+0x58>
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <KEYPAD_READ+0x54>
 194:	80 fd       	sbrc	r24, 0
 196:	15 c0       	rjmp	.+42     	; 0x1c2 <KEYPAD_READ+0x8a>
				{
					while(!(KEYPAD_PIN & (1 << col)));
 198:	89 b3       	in	r24, 0x19	; 25
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	04 2e       	mov	r0, r20
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <KEYPAD_READ+0x6c>
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <KEYPAD_READ+0x68>
 1a8:	80 ff       	sbrs	r24, 0
 1aa:	f6 cf       	rjmp	.-20     	; 0x198 <KEYPAD_READ+0x60>
					return keypad[row][col];
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	62 55       	subi	r22, 0x52	; 82
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255
 1b8:	fb 01       	movw	r30, r22
 1ba:	e4 0f       	add	r30, r20
 1bc:	f5 1f       	adc	r31, r21
 1be:	80 81       	ld	r24, Z
 1c0:	08 95       	ret
	{
		for(char row = 0; row < 4; row++)
		{
			KEYPAD_DDR = KEYPAD_ROW;
			KEYPAD_PORT = ~(1 << row + 4);
			for(char col = 0; col < 4; col++)
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
 1c4:	24 30       	cpi	r18, 0x04	; 4
 1c6:	60 f2       	brcs	.-104    	; 0x160 <KEYPAD_READ+0x28>
// Function to read input from keypad
U8 KEYPAD_READ()
{
	while(1)
	{
		for(char row = 0; row < 4; row++)
 1c8:	3f 5f       	subi	r19, 0xFF	; 255
 1ca:	34 30       	cpi	r19, 0x04	; 4
 1cc:	08 f4       	brcc	.+2      	; 0x1d0 <KEYPAD_READ+0x98>
 1ce:	b6 cf       	rjmp	.-148    	; 0x13c <KEYPAD_READ+0x4>
 1d0:	b3 cf       	rjmp	.-154    	; 0x138 <KEYPAD_READ>

000001d2 <input>:
    }
}

// Function to take input from user
void input(U8* str, U8 display)
{
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	8c 01       	movw	r16, r24
 1dc:	d6 2f       	mov	r29, r22
	for(char i = 0; i < 4; i++)
 1de:	c0 e0       	ldi	r28, 0x00	; 0
 1e0:	24 c0       	rjmp	.+72     	; 0x22a <input+0x58>
	{
		str[i] = KEYPAD_READ();		// Get input from keypad
 1e2:	0e 94 9c 00 	call	0x138	; 0x138 <KEYPAD_READ>
 1e6:	f8 01       	movw	r30, r16
 1e8:	ec 0f       	add	r30, r28
 1ea:	f1 1d       	adc	r31, r1
 1ec:	80 83       	st	Z, r24
		if(str[i] == '-' && i > 0)	// Delete for simulation
 1ee:	8d 32       	cpi	r24, 0x2D	; 45
 1f0:	69 f4       	brne	.+26     	; 0x20c <input+0x3a>
 1f2:	cc 23       	and	r28, r28
 1f4:	59 f0       	breq	.+22     	; 0x20c <input+0x3a>
//		if(str[i] == 'D' && i > 0)	// Delete for Hardware
		{
			i-= 2;
 1f6:	c2 50       	subi	r28, 0x02	; 2
			LCD_COMMAND(0x10);	// Shift cursor to the left by one;
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
			LCD_DATA(' ');
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	0e 94 6f 00 	call	0xde	; 0xde <LCD_DATA>
			LCD_COMMAND(0x10);	// Shift cursor to the left by one;
 204:	80 e1       	ldi	r24, 0x10	; 16
 206:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
			continue;
 20a:	0e c0       	rjmp	.+28     	; 0x228 <input+0x56>
		}
		// Don't store input other than numbers
		if(!(str[i] >= '0' && str[i] <= '9'))
 20c:	90 ed       	ldi	r25, 0xD0	; 208
 20e:	98 0f       	add	r25, r24
 210:	9a 30       	cpi	r25, 0x0A	; 10
 212:	10 f0       	brcs	.+4      	; 0x218 <input+0x46>
		{
			i--;
 214:	c1 50       	subi	r28, 0x01	; 1
			continue;
 216:	08 c0       	rjmp	.+16     	; 0x228 <input+0x56>
		}
		// check if inputing password don't display the numbers
		if(display)
 218:	dd 23       	and	r29, r29
 21a:	19 f0       	breq	.+6      	; 0x222 <input+0x50>
			LCD_DATA(str[i]);
 21c:	0e 94 6f 00 	call	0xde	; 0xde <LCD_DATA>
 220:	03 c0       	rjmp	.+6      	; 0x228 <input+0x56>
		else
			LCD_DATA('*');
 222:	8a e2       	ldi	r24, 0x2A	; 42
 224:	0e 94 6f 00 	call	0xde	; 0xde <LCD_DATA>
}

// Function to take input from user
void input(U8* str, U8 display)
{
	for(char i = 0; i < 4; i++)
 228:	cf 5f       	subi	r28, 0xFF	; 255
 22a:	c4 30       	cpi	r28, 0x04	; 4
 22c:	d0 f2       	brcs	.-76     	; 0x1e2 <input+0x10>
		if(display)
			LCD_DATA(str[i]);
		else
			LCD_DATA('*');
	}
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <main>:
U8 NAME_DB [OWNER_NUM][16] = {"     Ahmed", "     Morad", "     Hesham"};

void input(U8*, U8);

int main(void)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	00 d0       	rcall	.+0      	; 0x23e <main+0x6>
 23e:	00 d0       	rcall	.+0      	; 0x240 <main+0x8>
 240:	1f 92       	push	r1
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
    U8 INPUT[5] = {0};	// Character array to hold user input	
 246:	fe 01       	movw	r30, r28
 248:	31 96       	adiw	r30, 0x01	; 1
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	df 01       	movw	r26, r30
 24e:	1d 92       	st	X+, r1
 250:	8a 95       	dec	r24
 252:	e9 f7       	brne	.-6      	; 0x24e <main+0x16>
	U8 try_counter = 0;	// Count number of tries
	U8 ID_flag = 0;		// Set if correct ID
	U8 i = 0;
	LCD_init();
 254:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_init>
	DDRB = 0x1F;		// Set port B output for LEDs and DC motor(PINB0 --> PINB4)
 258:	8f e1       	ldi	r24, 0x1F	; 31
 25a:	87 bb       	out	0x17, r24	; 23
void input(U8*, U8);

int main(void)
{
    U8 INPUT[5] = {0};	// Character array to hold user input	
	U8 try_counter = 0;	// Count number of tries
 25c:	00 e0       	ldi	r16, 0x00	; 0
	LCD_init();
	DDRB = 0x1F;		// Set port B output for LEDs and DC motor(PINB0 --> PINB4)
	
    while (1) 
    {
		PORTB = 0x00;		// Turn off all outputs
 25e:	18 ba       	out	0x18, r1	; 24
		LCD_COMMAND(0x01);	// Clear LCD display
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
		LCD_COMMAND(0x80);	// Start at first line
 266:	80 e8       	ldi	r24, 0x80	; 128
 268:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
		
		// More than 3 tries
		if(try_counter == 3)
 26c:	03 30       	cpi	r16, 0x03	; 3
 26e:	79 f4       	brne	.+30     	; 0x28e <main+0x56>
		{
			LCD_DATA_STRING("  House Access  ");
 270:	8e eb       	ldi	r24, 0xBE	; 190
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 83 00 	call	0x106	; 0x106 <LCD_DATA_STRING>
			LCD_COMMAND(0xC0);
 278:	80 ec       	ldi	r24, 0xC0	; 192
 27a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
			LCD_DATA_STRING("    Blocked    ");
 27e:	8f ec       	ldi	r24, 0xCF	; 207
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 83 00 	call	0x106	; 0x106 <LCD_DATA_STRING>
			PORTB |= (1 << 0);	// Turn on red LED
 286:	88 b3       	in	r24, 0x18	; 24
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	88 bb       	out	0x18, r24	; 24
 28c:	ff cf       	rjmp	.-2      	; 0x28c <main+0x54>
			while(1);
		}
		
		LCD_DATA_STRING("ID: ");
 28e:	8f ed       	ldi	r24, 0xDF	; 223
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 83 00 	call	0x106	; 0x106 <LCD_DATA_STRING>
		input(INPUT, 1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	ce 01       	movw	r24, r28
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <input>
		ID_flag = 0;
		
		// Check input ID
		for(i = 0; i < OWNER_NUM; i++)
 2a0:	10 e0       	ldi	r17, 0x00	; 0
 2a2:	81 c0       	rjmp	.+258    	; 0x3a6 <main+0x16e>
		{
			if(!(strcmp(ID_DB[i], INPUT)))
 2a4:	e1 2e       	mov	r14, r17
 2a6:	f1 2c       	mov	r15, r1
 2a8:	c7 01       	movw	r24, r14
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	8e 0d       	add	r24, r14
 2b4:	9f 1d       	adc	r25, r15
 2b6:	be 01       	movw	r22, r28
 2b8:	6f 5f       	subi	r22, 0xFF	; 255
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	81 56       	subi	r24, 0x61	; 97
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <strcmp>
 2c4:	89 2b       	or	r24, r25
 2c6:	09 f0       	breq	.+2      	; 0x2ca <main+0x92>
 2c8:	6d c0       	rjmp	.+218    	; 0x3a4 <main+0x16c>
			{
				// Correct ID --> input password
				ID_flag = 1;
				LCD_COMMAND(0xC0);							// New line in LCD
 2ca:	80 ec       	ldi	r24, 0xC0	; 192
 2cc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
				LCD_DATA_STRING("Password: ");
 2d0:	84 ee       	ldi	r24, 0xE4	; 228
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 83 00 	call	0x106	; 0x106 <LCD_DATA_STRING>
				input(INPUT, 0);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	ce 01       	movw	r24, r28
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <input>
				// Check password
				if(!(strcmp(PASSWORD_DB[i], INPUT)))
 2e2:	c7 01       	movw	r24, r14
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	8e 0d       	add	r24, r14
 2ee:	9f 1d       	adc	r25, r15
 2f0:	be 01       	movw	r22, r28
 2f2:	6f 5f       	subi	r22, 0xFF	; 255
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255
 2f6:	80 57       	subi	r24, 0x70	; 112
 2f8:	9f 4f       	sbci	r25, 0xFF	; 255
 2fa:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <strcmp>
 2fe:	89 2b       	or	r24, r25
 300:	c1 f5       	brne	.+112    	; 0x372 <main+0x13a>
				{
					LCD_COMMAND(0x01);						// Clear LCD display
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
					LCD_COMMAND(0x80);						// Start at first line
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
					LCD_DATA_STRING("  Welcome Home  ");
 30e:	8f ee       	ldi	r24, 0xEF	; 239
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 83 00 	call	0x106	; 0x106 <LCD_DATA_STRING>
					LCD_COMMAND(0xC0);
 316:	80 ec       	ldi	r24, 0xC0	; 192
 318:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
					LCD_DATA_STRING(NAME_DB[i]);
 31c:	c7 01       	movw	r24, r14
 31e:	82 95       	swap	r24
 320:	92 95       	swap	r25
 322:	90 7f       	andi	r25, 0xF0	; 240
 324:	98 27       	eor	r25, r24
 326:	80 7f       	andi	r24, 0xF0	; 240
 328:	98 27       	eor	r25, r24
 32a:	80 5a       	subi	r24, 0xA0	; 160
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	0e 94 83 00 	call	0x106	; 0x106 <LCD_DATA_STRING>
					PORTB |= (1 << 1);						// Turn on green LED
 332:	88 b3       	in	r24, 0x18	; 24
 334:	82 60       	ori	r24, 0x02	; 2
 336:	88 bb       	out	0x18, r24	; 24
					// Rotate DC motor clockwise
					PORTB |= (1 << DC_ENA);
 338:	88 b3       	in	r24, 0x18	; 24
 33a:	84 60       	ori	r24, 0x04	; 4
 33c:	88 bb       	out	0x18, r24	; 24
					PORTB |= (1 << DC_IN1);
 33e:	88 b3       	in	r24, 0x18	; 24
 340:	80 61       	ori	r24, 0x10	; 16
 342:	88 bb       	out	0x18, r24	; 24
 344:	bf ef       	ldi	r27, 0xFF	; 255
 346:	24 e3       	ldi	r18, 0x34	; 52
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	b1 50       	subi	r27, 0x01	; 1
 34c:	20 40       	sbci	r18, 0x00	; 0
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <main+0x112>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x11c>
 354:	00 00       	nop
					_delay_ms(4000);
					PORTB &= ~(1 << DC_ENA);				// Stop motor
 356:	88 b3       	in	r24, 0x18	; 24
 358:	8b 7f       	andi	r24, 0xFB	; 251
 35a:	88 bb       	out	0x18, r24	; 24
					LCD_COMMAND(0x01);						// Clear LCD display
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
					LCD_COMMAND(0x80);						// Start at first line
 362:	80 e8       	ldi	r24, 0x80	; 128
 364:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
					LCD_DATA_STRING(" Door is opened ");
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_DATA_STRING>
 370:	ff cf       	rjmp	.-2      	; 0x370 <main+0x138>
					while(1);
				}
				else
				{
					try_counter++;
 372:	0f 5f       	subi	r16, 0xFF	; 255
					LCD_COMMAND(0x01);	// Clear LCD display
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
					LCD_COMMAND(0x80);	// Start at first line
 37a:	80 e8       	ldi	r24, 0x80	; 128
 37c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
					LCD_DATA_STRING(" Wrong Password ");
 380:	81 e1       	ldi	r24, 0x11	; 17
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 83 00 	call	0x106	; 0x106 <LCD_DATA_STRING>
					PORTB |= (1 << 0);	// Turn on red LED
 388:	88 b3       	in	r24, 0x18	; 24
 38a:	81 60       	ori	r24, 0x01	; 1
 38c:	88 bb       	out	0x18, r24	; 24
 38e:	9f e7       	ldi	r25, 0x7F	; 127
 390:	aa e1       	ldi	r26, 0x1A	; 26
 392:	b6 e0       	ldi	r27, 0x06	; 6
 394:	91 50       	subi	r25, 0x01	; 1
 396:	a0 40       	sbci	r26, 0x00	; 0
 398:	b0 40       	sbci	r27, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x15c>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x166>
 39e:	00 00       	nop
		for(i = 0; i < OWNER_NUM; i++)
		{
			if(!(strcmp(ID_DB[i], INPUT)))
			{
				// Correct ID --> input password
				ID_flag = 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <main+0x176>
		LCD_DATA_STRING("ID: ");
		input(INPUT, 1);
		ID_flag = 0;
		
		// Check input ID
		for(i = 0; i < OWNER_NUM; i++)
 3a4:	1f 5f       	subi	r17, 0xFF	; 255
 3a6:	13 30       	cpi	r17, 0x03	; 3
 3a8:	08 f4       	brcc	.+2      	; 0x3ac <main+0x174>
 3aa:	7c cf       	rjmp	.-264    	; 0x2a4 <main+0x6c>
			while(1);
		}
		
		LCD_DATA_STRING("ID: ");
		input(INPUT, 1);
		ID_flag = 0;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}
			}
		}
		
		if((!ID_flag) && (i == 3))
 3ae:	81 11       	cpse	r24, r1
 3b0:	56 cf       	rjmp	.-340    	; 0x25e <main+0x26>
 3b2:	13 30       	cpi	r17, 0x03	; 3
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <main+0x180>
 3b6:	53 cf       	rjmp	.-346    	; 0x25e <main+0x26>
		{
			try_counter++;
 3b8:	0f 5f       	subi	r16, 0xFF	; 255
			LCD_COMMAND(0x01);	// Clear LCD display
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
			LCD_COMMAND(0x80);	// Start at first line
 3c0:	80 e8       	ldi	r24, 0x80	; 128
 3c2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_COMMAND>
			LCD_DATA_STRING("    Wrong ID   ");
 3c6:	82 e2       	ldi	r24, 0x22	; 34
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 83 00 	call	0x106	; 0x106 <LCD_DATA_STRING>
			PORTB |= (1 << 0);	// Turn on red LED
 3ce:	88 b3       	in	r24, 0x18	; 24
 3d0:	81 60       	ori	r24, 0x01	; 1
 3d2:	88 bb       	out	0x18, r24	; 24
 3d4:	2f e7       	ldi	r18, 0x7F	; 127
 3d6:	8a e1       	ldi	r24, 0x1A	; 26
 3d8:	96 e0       	ldi	r25, 0x06	; 6
 3da:	21 50       	subi	r18, 0x01	; 1
 3dc:	80 40       	sbci	r24, 0x00	; 0
 3de:	90 40       	sbci	r25, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x1a2>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0x1ac>
 3e4:	00 00       	nop
 3e6:	3b cf       	rjmp	.-394    	; 0x25e <main+0x26>

000003e8 <strcmp>:
 3e8:	fb 01       	movw	r30, r22
 3ea:	dc 01       	movw	r26, r24
 3ec:	8d 91       	ld	r24, X+
 3ee:	01 90       	ld	r0, Z+
 3f0:	80 19       	sub	r24, r0
 3f2:	01 10       	cpse	r0, r1
 3f4:	d9 f3       	breq	.-10     	; 0x3ec <strcmp+0x4>
 3f6:	99 0b       	sbc	r25, r25
 3f8:	08 95       	ret

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
